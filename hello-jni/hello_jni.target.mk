# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := hello_jni
### Generated for rule _home_chengkai_develop_chromium_src_sample_hello_jni_hello_jni_gyp_hello_jni_target_generate_jni_headers:
$(obj)/gen/sample/hello-jni/jni/Hello_jni.h: obj := $(abs_obj)
$(obj)/gen/sample/hello-jni/jni/Hello_jni.h: builddir := $(abs_builddir)
$(obj)/gen/sample/hello-jni/jni/Hello_jni.h: TOOLSET := $(TOOLSET)
$(obj)/gen/sample/hello-jni/jni/Hello_jni.h: sample/hello-jni/src/com/mx/example/hello_jni/Hello.java base/android/jni_generator/jni_generator.py FORCE_DO_CMD
	$(call do_cmd,_home_chengkai_develop_chromium_src_sample_hello_jni_hello_jni_gyp_hello_jni_target_generate_jni_headers_0)

all_deps += $(obj)/gen/sample/hello-jni/jni/Hello_jni.h
cmd__home_chengkai_develop_chromium_src_sample_hello_jni_hello_jni_gyp_hello_jni_target_generate_jni_headers_0 = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd sample/hello-jni; mkdir -p $(obj)/gen/sample/hello-jni/jni; ../../base/android/jni_generator/jni_generator.py --input_file "$(abspath $<)" --output_dir "$(obj)/gen/sample/hello-jni/jni"
quiet_cmd__home_chengkai_develop_chromium_src_sample_hello_jni_hello_jni_gyp_hello_jni_target_generate_jni_headers_0 = RULE _home_chengkai_develop_chromium_src_sample_hello_jni_hello_jni_gyp_hello_jni_target_generate_jni_headers_0 $@

rule__home_chengkai_develop_chromium_src_sample_hello_jni_hello_jni_gyp_hello_jni_target_generate_jni_headers_outputs := \
	$(obj)/gen/sample/hello-jni/jni/Hello_jni.h

### Finished generating for rule: _home_chengkai_develop_chromium_src_sample_hello_jni_hello_jni_gyp_hello_jni_target_generate_jni_headers

### Finished generating for all rules

DEFS_Debug := \
	'-D_FILE_OFFSET_BITS=64' \
	'-DNO_TCMALLOC' \
	'-DDISABLE_NACL' \
	'-DCHROMIUM_BUILD' \
	'-DUSE_LIBJPEG_TURBO=1' \
	'-DUSE_PROPRIETARY_CODECS' \
	'-DENABLE_PEPPER_THREADING' \
	'-DENABLE_GPU=1' \
	'-DUSE_OPENSSL=1' \
	'-DENABLE_EGLIMAGE=1' \
	'-DUSE_SKIA=1' \
	'-DANDROID' \
	'-D__GNU_SOURCE=1' \
	'-DUSE_STLPORT=1' \
	'-D_STLP_USE_PTR_SPECIALIZATIONS=1' \
	'-DCHROME_SYMBOLS_ID=""' \
	'-DANDROID_UPSTREAM_BRINGUP=1' \
	'-DHAVE_SYS_UIO_H' \
	'-DDYNAMIC_ANNOTATIONS_ENABLED=1' \
	'-DWTF_USE_DYNAMIC_ANNOTATIONS=1' \
	'-D_DEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
	-fno-exceptions \
	-fno-strict-aliasing \
	-Wno-unused-parameter \
	-Wno-missing-field-initializers \
	-fvisibility=hidden \
	-pipe \
	-fPIC \
	-Wno-format \
	-mthumb \
	-march=armv7-a \
	-mtune=cortex-a8 \
	-mfloat-abi=softfp \
	-mfpu=vfpv3-d16 \
	-fno-tree-sra \
	-fuse-ld=gold \
	-Wno-psabi \
	-mthumb-interwork \
	-ffunction-sections \
	-funwind-tables \
	-g \
	-fstack-protector \
	-fno-short-enums \
	-finline-limit=64 \
	-Wa,--noexecstack \
	--sysroot=/home/chengkai/develop/chromium/src/third_party/android_tools/ndk//platforms/android-9/arch-arm \
	-I/home/chengkai/develop/chromium/src/third_party/android_tools/ndk//sources/cxx-stl/stlport/stlport \
	-Os \
	-g \
	-fomit-frame-pointer \
	-fdata-sections \
	-ffunction-sections

# Flags passed to only C files.
CFLAGS_C_Debug :=

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-fno-rtti \
	-fno-threadsafe-statics \
	-fvisibility-inlines-hidden \
	-Wno-deprecated \
	-Wno-abi

INCS_Debug := \
	-I. \
	-I$(obj)/gen/sample/hello-jni

DEFS_Release := \
	'-D_FILE_OFFSET_BITS=64' \
	'-DNO_TCMALLOC' \
	'-DDISABLE_NACL' \
	'-DCHROMIUM_BUILD' \
	'-DUSE_LIBJPEG_TURBO=1' \
	'-DUSE_PROPRIETARY_CODECS' \
	'-DENABLE_PEPPER_THREADING' \
	'-DENABLE_GPU=1' \
	'-DUSE_OPENSSL=1' \
	'-DENABLE_EGLIMAGE=1' \
	'-DUSE_SKIA=1' \
	'-DANDROID' \
	'-D__GNU_SOURCE=1' \
	'-DUSE_STLPORT=1' \
	'-D_STLP_USE_PTR_SPECIALIZATIONS=1' \
	'-DCHROME_SYMBOLS_ID=""' \
	'-DANDROID_UPSTREAM_BRINGUP=1' \
	'-DHAVE_SYS_UIO_H' \
	'-DNDEBUG' \
	'-DNVALGRIND' \
	'-DDYNAMIC_ANNOTATIONS_ENABLED=0'

# Flags passed to all source files.
CFLAGS_Release := \
	-fno-exceptions \
	-fno-strict-aliasing \
	-Wno-unused-parameter \
	-Wno-missing-field-initializers \
	-fvisibility=hidden \
	-pipe \
	-fPIC \
	-Wno-format \
	-mthumb \
	-march=armv7-a \
	-mtune=cortex-a8 \
	-mfloat-abi=softfp \
	-mfpu=vfpv3-d16 \
	-fno-tree-sra \
	-fuse-ld=gold \
	-Wno-psabi \
	-mthumb-interwork \
	-ffunction-sections \
	-funwind-tables \
	-g \
	-fstack-protector \
	-fno-short-enums \
	-finline-limit=64 \
	-Wa,--noexecstack \
	--sysroot=/home/chengkai/develop/chromium/src/third_party/android_tools/ndk//platforms/android-9/arch-arm \
	-I/home/chengkai/develop/chromium/src/third_party/android_tools/ndk//sources/cxx-stl/stlport/stlport \
	-Os \
	-fno-ident \
	-fdata-sections \
	-ffunction-sections \
	-fomit-frame-pointer

# Flags passed to only C files.
CFLAGS_C_Release :=

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-fno-rtti \
	-fno-threadsafe-statics \
	-fvisibility-inlines-hidden \
	-Wno-deprecated \
	-Wno-abi

INCS_Release := \
	-I. \
	-I$(obj)/gen/sample/hello-jni

OBJS := \
	$(obj).target/$(TARGET)/sample/hello-jni/hello-jni.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# Make sure our actions/rules run before any of us.
$(OBJS): | $(rule__home_chengkai_develop_chromium_src_sample_hello_jni_hello_jni_gyp_hello_jni_target_generate_jni_headers_outputs)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

# End of this set of suffix rules
### Rules for final target.
# Build our special outputs first.
$(obj).target/sample/hello-jni/libhello_jni.so: | $(rule__home_chengkai_develop_chromium_src_sample_hello_jni_hello_jni_gyp_hello_jni_target_generate_jni_headers_outputs)

# Preserve order dependency of special output on deps.
$(rule__home_chengkai_develop_chromium_src_sample_hello_jni_hello_jni_gyp_hello_jni_target_generate_jni_headers_outputs): | 

LDFLAGS_Debug := \
	-Wl,-z,noexecstack \
	-fPIC \
	-Wl,-z,relro \
	-Wl,-z,now \
	-fuse-ld=gold \
	-nostdlib \
	-Wl,--no-undefined \
	-Wl,--exclude-libs=ALL \
	--sysroot=/home/chengkai/develop/chromium/src/third_party/android_tools/ndk//platforms/android-9/arch-arm \
	-Wl,--icf=safe \
	-L/home/chengkai/develop/chromium/src/third_party/android_tools/ndk//sources/cxx-stl/stlport/libs/armeabi-v7a \
	-Wl,-shared,-Bsymbolic \
	/home/chengkai/develop/chromium/src/third_party/android_tools/ndk//platforms/android-9/arch-arm/usr/lib/crtbegin_so.o \
	-Wl,-O1 \
	-Wl,--as-needed \
	-Wl,--gc-sections

LDFLAGS_Release := \
	-Wl,-z,noexecstack \
	-fPIC \
	-Wl,-z,relro \
	-Wl,-z,now \
	-fuse-ld=gold \
	-nostdlib \
	-Wl,--no-undefined \
	-Wl,--exclude-libs=ALL \
	--sysroot=/home/chengkai/develop/chromium/src/third_party/android_tools/ndk//platforms/android-9/arch-arm \
	-Wl,--icf=safe \
	-L/home/chengkai/develop/chromium/src/third_party/android_tools/ndk//sources/cxx-stl/stlport/libs/armeabi-v7a \
	-Wl,-shared,-Bsymbolic \
	/home/chengkai/develop/chromium/src/third_party/android_tools/ndk//platforms/android-9/arch-arm/usr/lib/crtbegin_so.o \
	-Wl,-O1 \
	-Wl,--as-needed \
	-Wl,--gc-sections

LIBS := \
	 \
	-lstlport_static \
	/home/chengkai/develop/chromium/src/third_party/android_tools/ndk/toolchains/arm-linux-androideabi-4.6/prebuilt/linux-x86_64/bin/../lib/gcc/arm-linux-androideabi/4.6.x-google/libgcc.a \
	-lc \
	-ldl \
	-lstdc++ \
	-lm \
	/home/chengkai/develop/chromium/src/third_party/android_tools/ndk//platforms/android-9/arch-arm/usr/lib/crtend_so.o

$(obj).target/sample/hello-jni/libhello_jni.so: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/sample/hello-jni/libhello_jni.so: LIBS := $(LIBS)
$(obj).target/sample/hello-jni/libhello_jni.so: LD_INPUTS := $(OBJS)
$(obj).target/sample/hello-jni/libhello_jni.so: TOOLSET := $(TOOLSET)
$(obj).target/sample/hello-jni/libhello_jni.so: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,solink)

all_deps += $(obj).target/sample/hello-jni/libhello_jni.so
# Add target alias
.PHONY: hello_jni
hello_jni: $(builddir)/lib.target/libhello_jni.so

# Copy this to the shared library output path.
$(builddir)/lib.target/libhello_jni.so: TOOLSET := $(TOOLSET)
$(builddir)/lib.target/libhello_jni.so: $(obj).target/sample/hello-jni/libhello_jni.so FORCE_DO_CMD
	$(call do_cmd,copy)

all_deps += $(builddir)/lib.target/libhello_jni.so
# Short alias for building this shared library.
.PHONY: libhello_jni.so
libhello_jni.so: $(obj).target/sample/hello-jni/libhello_jni.so $(builddir)/lib.target/libhello_jni.so

# Add shared library to "all" target.
.PHONY: all
all: $(builddir)/lib.target/libhello_jni.so

